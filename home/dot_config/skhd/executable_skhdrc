#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]


# Set audio output and input
shift + alt - 0 : ~/bin/toggle_audio.sh

# focus or open specific applications
alt - a : ~/.config/skhd/focus-window.sh "Alacritty" "/Applications/Alacritty.app/"
alt - b : ~/.config/skhd/focus-window.sh "Brave Browser" "/Applications/Brave Browser.app/"
alt - c : ~/.config/skhd/focus-window.sh "Thorium" "/Applications/Thorium.app/"
alt - d : ~/.config/skhd/focus-window.sh "Discord" "/Applications/Discord.app/"
alt - e : ~/.config/skhd/focus-window.sh "Code" "/Applications/Visual Studio Code.app/"
alt - i : ~/.config/skhd/focus-window.sh "Bitwarden" "/Applications/Bitwarden.app/"
alt - g : ~/.config/skhd/focus-window.sh "Messages" "/Applications/Messages.app/"
alt - o : ~/.config/skhd/focus-window.sh "Obsidian" "/Applications/Obsidian.app/"
alt - s : ~/.config/skhd/focus-window.sh "Slack" "/Applications/Slack.app/"
alt - f : ~/.config/skhd/focus-window.sh "Safari" "/Applications/Safari.app/"
alt - p : ~/.config/skhd/focus-window.sh "Spotify" "/Applications/Spotify.app/"

# close focused window
alt - w : yabai -m window --close

# focus window, moving to the next display if applicable
alt - h : yabai -m window --focus west || (yabai -m display --focus west; yabai -m window --focus east; yabai -m window --focus east)
alt - j : yabai -m window --focus south || (yabai -m display --focus south; yabai -m window --focus north; yabai -m window --focus north)
alt - k : yabai -m window --focus north || (yabai -m display --focus north; yabai -m window --focus south; yabai -m window --focus south)
alt - l : yabai -m window --focus east || (yabai -m display --focus east; yabai -m window focus west; yabai -m window --focus west)
# alt - j : yabai -m window --focus south
# alt - k : yabai -m window --focus north
# alt - l : yabai -m window --focus east

cmd - j : yabai -m window --focus prev
cmd - k : yabai -m window --focus next

# equalize size of windows
shift + cmd - 0 : yabai -m space --balance

# move application to window
shift + alt - 1 : yabai -m window --space 1; yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space 2; yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space 3; yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space 4; yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space 5; yabai -m space --focus 5
shift + alt - 6 : yabai -m window --space 6; yabai -m space --focus 6
shift + alt - 7 : yabai -m window --space 7; yabai -m space --focus 7
shift + alt - 8 : yabai -m window --space 8; yabai -m space --focus 8
shift + alt - 9 : yabai -m window --space 9; yabai -m space --focus 9

# swap window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move window
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east

# move window to a different display (mimics functionality used in Rectangle)
cmd + alt - h : yabai -m window --display west; yabai -m display --focus west
cmd + alt + ctrl - left : yabai -m window --display west; yabai -m display --focus west
cmd + alt - l : yabai -m window --display east; yabai -m display --focus east
cmd + alt + ctrl - right : yabai -m window --display east; yabai -m display --focus east
cmd + alt - k : yabai -m window --display north; yabai -m display --focus north
cmd + alt + ctrl - up : yabai -m window --display north; yabai -m display --focus north
cmd + alt - j : yabai -m window --display south; yabai -m display --focus south
cmd + alt + ctrl - down : yabai -m window --display south; yabai -m display --focus south

# make floating window fill screen
shift + alt - up     : yabai -m window --grid-layout 1:1:0:0:1:1

# create desktop, move window and follow focus
shift + cmd - n : yabai -m space --create;\
                  id=$(chunkc tiling::query --desktops-for-monitor $(chunkc tiling::query --monitor-for-desktop $(chunkc tiling::query --desktop id)));\
                  yabai -m window --send-to-desktop $(echo ${id##* });\
                  yabai -m space --focus $(echo ${id##* })

# create desktop and follow focus
cmd + alt - n : yabai -m space --create;\
                id=$(chunkc tiling::query --desktops-for-monitor $(chunkc tiling::query --monitor-for-desktop $(chunkc tiling::query --desktop id)));\
                yabai -m space --focus $(echo ${id##* })
# destroy desktop
cmd + alt - w : yabai -m space --annihilate

# fast focus desktop
cmd + alt - x : yabai -m space --focus $(chunkc get _last_active_desktop)
cmd + alt - z : yabai -m space --focus prev
cmd + alt - c : yabai -m space --focus next
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9
alt - 0 : yabai -m space --focus 10

# focus monitor
ctrl + alt - z  : chunkc tiling::monitor -f prev
ctrl + alt - c  : chunkc tiling::monitor -f next
ctrl + alt - 1  : chunkc tiling::monitor -f 1
ctrl + alt - 2  : chunkc tiling::monitor -f 2
ctrl + alt - 3  : chunkc tiling::monitor -f 3

# send window to monitor and follow focus
ctrl + cmd - z  : yabai -m window --send-to-monitor prev; chunkc tiling::monitor -f prev
ctrl + cmd - c  : yabai -m window --send-to-monitor next; chunkc tiling::monitor -f next
ctrl + cmd - 1  : yabai -m window --send-to-monitor 1; chunkc tiling::monitor -f 1
ctrl + cmd - 2  : yabai -m window --send-to-monitor 2; chunkc tiling::monitor -f 2
ctrl + cmd - 3  : yabai -m window --send-to-monitor 3; chunkc tiling::monitor -f 3

# decrease region size
shift + cmd - a : yabai -m window --use-temporary-ratio -0.1 --adjust-window-edge west
shift + cmd - s : yabai -m window --use-temporary-ratio -0.1 --adjust-window-edge south
shift + cmd - w : yabai -m window --use-temporary-ratio -0.1 --adjust-window-edge north
shift + cmd - d : yabai -m window --use-temporary-ratio -0.1 --adjust-window-edge east

# set insertion point for focused container
ctrl + alt - f : yabai -m window --use-insertion-point cancel
ctrl + alt - h : yabai -m window --use-insertion-point west
ctrl + alt - j : yabai -m window --use-insertion-point south
ctrl + alt - k : yabai -m window --use-insertion-point north
ctrl + alt - l : yabai -m window --use-insertion-point east

# rotate tree
alt - r : yabai -m space --rotate 270 # Clockwise rotation
shift + alt - r : yabai -m space --rotate 90 # Counter-clockwise rotation

# toggle window fullscreen
alt - m : yabai -m window --toggle zoom-fullscreen

# toggle window native fullscreen
shift + alt - f : yabai -m window --toggle native-fullscreen

# toggle window parent zoom
# alt - d : yabai -m window --toggle parent

# float / unfloat window and center on screen
alt - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2
